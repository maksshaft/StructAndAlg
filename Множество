public class Set {
   // Множество элементов
   private Object[] elements;
   // Текущая позиция в множестве
   private int position = 0;

   public Set() {
      // Инициализация пустого множества
      elements = new Object[0];
   }

   // Добавление элемента в множество
   public void add(Object element) {
      if (!contains(element)) {
         Object[] newElements = new Object[elements.length + 1];
         for (int i = 0; i < elements.length; i++) {
            newElements[i] = elements[i];
         }
         newElements[newElements.length - 1] = element;
         elements = newElements;
      }
   }

   // Получение элемента по индексу
   public Object get(int index) {
      return elements[index];
   }

   // Проверка наличия элемента в множестве
   public boolean contains(Object element) {
      for (Object obj : elements) {
         if (obj.equals(element)) {
            return true;
         }
      }
      return false;
   }

   // Удаление элемента из множества
   public void remove(Object element) {
      int index = indexOf(element);
      if (index != -1) {
         remove(index);
      }
   }

   // Поиск первого вхождения элемента в множество
   public int indexOf(Object element) {
      for (int i = 0; i < elements.length; i++) {
         if (elements[i].equals(element)) {
            return i;
         }
      }
      return -1;
   }
}
